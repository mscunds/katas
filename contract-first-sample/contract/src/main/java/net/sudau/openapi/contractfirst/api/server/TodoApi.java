/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.sudau.openapi.contractfirst.api.server;

import net.sudau.openapi.contractfirst.api.models.Aufgabe;
import net.sudau.openapi.contractfirst.api.models.Aufgabenliste;
import net.sudau.openapi.contractfirst.api.models.Fehler;
import net.sudau.openapi.contractfirst.api.models.PageInfo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-30T15:24:44.113713700+02:00[Europe/Berlin]")
@Validated
@Tag(name = "todo", description = "Bereich der Aufgabenverwaltung")
public interface TodoApi {

    /**
     * POST /todos : legt eine neue Aufgabe an.
     * legt eine neue Aufgabe an.
     *
     * @param aufgabe Daten der anzulegenden Aufgabe (required)
     * @return die Aufgabe wurde mit den angegebenen Daten erstellt (status code 200)
     *         or tritt auf, wenn irgendein nicht verarbeitbarer Fehler im Server auftritt. (status code 500)
     */
    @Operation(
        operationId = "erzeugeAufgabe",
        summary = "legt eine neue Aufgabe an.",
        description = "legt eine neue Aufgabe an.",
        tags = { "todo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "die Aufgabe wurde mit den angegebenen Daten erstellt", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Aufgabe.class))
            }),
            @ApiResponse(responseCode = "500", description = "tritt auf, wenn irgendein nicht verarbeitbarer Fehler im Server auftritt.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Fehler.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/todos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Aufgabe> erzeugeAufgabe(
        @Parameter(name = "Aufgabe", description = "Daten der anzulegenden Aufgabe", required = true) @Valid @RequestBody Aufgabe aufgabe
    );


    /**
     * GET /todos : liefert alle todos vom Server
     * liefert alle todos vom Server
     *
     * @param pageInfo id der Aufgabe (optional)
     * @return liefert alle Todos, zu angegebenen Seite in der angegebenen Anzahl. Wenn Page Info nicht definiert ist,  werden die ersten 10 Todos geladen. (status code 200)
     *         or liefert eine leere Liste an Todos. Die aktuelle Seite din er Page Info ist dann immer 0. (status code 204)
     */
    @Operation(
        operationId = "liesAufgaben",
        summary = "liefert alle todos vom Server",
        description = "liefert alle todos vom Server",
        tags = { "todo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "liefert alle Todos, zu angegebenen Seite in der angegebenen Anzahl. Wenn Page Info nicht definiert ist,  werden die ersten 10 Todos geladen.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Aufgabenliste.class))
            }),
            @ApiResponse(responseCode = "204", description = "liefert eine leere Liste an Todos. Die aktuelle Seite din er Page Info ist dann immer 0.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Aufgabenliste.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/todos",
        produces = { "application/json" }
    )
    ResponseEntity<Aufgabenliste> liesAufgaben(
        @Parameter(name = "pageInfo", description = "id der Aufgabe", in = ParameterIn.QUERY) @Valid PageInfo pageInfo
    );


    /**
     * GET /todos/{id} : liefert das Todo mit der angegebenen id
     *
     * @param id id der Aufgabe (required)
     * @return hat die Aufgabe mit der gegebenen id gefunden (status code 200)
     */
    @Operation(
        operationId = "todoDetails",
        summary = "liefert das Todo mit der angegebenen id",
        tags = { "todo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "hat die Aufgabe mit der gegebenen id gefunden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Aufgabe.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/todos/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Aufgabe> todoDetails(
        @Parameter(name = "id", description = "id der Aufgabe", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );

}
